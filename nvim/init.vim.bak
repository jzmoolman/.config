    " To fix colorschemes
    if (has("termguicolors"))
        set termguicolors
    endif
    
    " Fish doesn't play all that well with others
    set shell=/bin/zsh

    " Show line numbers.
    ""set number - Can't see the difference if both are set? will tke out if I am done
    set relativenumber
    
    " Disable audible bell because it's annoying.
    set noerrorbells visualbell t_vb=

    " Try to prevent bad habits like using the arrow keys for movement. This is
    " not the only possible bad habit. For example, holding down the h/j/k/l keys
    " for movement, rather than using more efficient movement commands, is also a
    " bad habit. The former is enforceable through a .vimrc, while we don't know
    " how to prevent the latter.
    " Do this in normal mode...
    nnoremap <Left>  :echo "Use h"<CR>
    nnoremap <Right> :echo "Use l"<CR>
    nnoremap <Up>    :echo "Use k"<CR>
    nnoremap <Down>  :echo "Use j"<CR>
    
    " ...and in insert mode
    inoremap <Left>  <ESC>:echo "Use h"<CR>
    inoremap <Right> <ESC>:echo "Use l"<CR>
    inoremap <Up>    <ESC>:echo "Use k"<CR>
    inoremap <Down>  <ESC>:echo "Use j"<CR>

    " Spaces & Tabs
    set tabstop=4       " number of visual spaces per TAB
    
    " This is set automatically when vimrc is run, but it's good to know why it exists
    " Default - if vimrc are found
    if &compatible
        set nocompatible
    endif

    " Minpac setup
    packadd minpac
    
    call minpac#init()
    call minpac#add('k-takata/minpac', {'type': 'opt'})
    
    command! Packupdate call minpac#update()
    command! Packclean call minpac#clean()
    command! Packstatus call minpac#status()

    " Packages -
    call minpac#add('tpope/vim-scriptease', {'type': 'opt'})

    call minpac#add('preservim/nerdtree')

    " Packages - colorschemes 
    call minpac#add('morhetz/gruvbox')
    call minpac#add('joshdick/onedark.vim')
    call minpac#add('arcticicestudio/nord-vim')

    " Packages - NERDTree
    call minpac#add('preservim/nerdtree')
    
    " Packages  - fzf 
    call minpac#add('junegunn/fzf')

    " Packages - Pythons tools
    " Package - Syntax highlighting
    call minpac#add('numirias/semshi')
    
    " Package - Indentation
    call minpac#add('Vimjas/vim-python-pep8-indent') 

    " Packages - Linting & Fixing
    call minpac#add('dense-analysis/ale')

    " Packages - Auto Complete stuff
    call minpac#add('kiteco/vim-plugin')

    " Packages Setup - colorscheme
    colorscheme nord

    " Packages Setup - Linting & Fixing
    let g:ale_linters = {
                \   'python': ['flake8', 'pylint'],
                \   'javascript': ['eslint'],
                \}
    let g:ale_fixers = {
                \   'python': ['yapf'],
                \}
    nmap <F10> :ALEFix<CR>
    let g:ale_fix_on_save = 1

    " Packages Setup - FZF Key bindings
    nnoremap <C-p> :<C-u>FZF<CR>

    " Turn on syntax highlighting on.
    syntax on


    " Show a visual line under the cursor's current line
    set cursorline

    " Show the matching part of the pair for [] {} ()
    "" set showmatch -- Can;t see a difference

    " Statusbar
    set statusline=%<%f\ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)\ %P
    
    " Always show the status line at the bottom, even if you only have one window open.
    set laststatus=2

    " Default behavior is not so intuitive
    " Default
    set backspace=indent,eol,start

    "" Enable searching as you type, rather than waiting till you press enter.
    set incsearch

    " Unbind some useless/annoying default key bindings.
    " 'Q' in normal mode enters Ex mode. You almost never want this.
    nmap Q <Nop> 

    set softtabstop=4   " number of spaces in tab when editing
    set shiftwidth=4    " number of spaces to use for autoindent
    set expandtab       " tabs are space
    set autoindent
    set copyindent      " copy indent from the previous line

    " Setup whitespace chars
    set list
    set listchars=trail:·,precedes:«,extends:»,space:·

    " Open new split Panes to right and below
    set splitright
    set splitbelow

    " Key binding for window foucs
    nnoremap <C-J> <C-W><C-J>
    nnoremap <C-K> <C-W><C-K>
    nnoremap <C-H> <C-W><C-H>
    nnoremap <C-L> <C-W><C-L>

    " Turn terminal to normal mode with escape
    tnoremap <Esc> <C-\><C-n>
    "Start terminal in insert mode
    au BufEnter * if &buftype == 'terminal' | :startinsert | endif
    " Open terminal on ctrl+n
    function! OpenTerminal()
        split term://zsh
        resize 10
    endfunction
    nnoremap <c-n> :call OpenTerminal()<CR>

    " Linting
    let g:ale_linterl = {
    \   'javascript': ['eslint'],
    \ }

    nmap <silent> [W <Plug>(ale_first)
    nmap <silent> [w <Plug>(ale_previous)
    nmap <silent> ]w <Plug>(ale_next)
    nmap <silent> ]W <Plug>(ale_last)

    " Grepper Plugin
    let g:grepper = {}
    let g:grepper.tools = ['grep', 'git', 'rg']

    nnoremap <Leader>* :Grepper -cword -noprompt<CR>

    nmap gs <plug>(GrepperOperatr)
    nmap gs <plug>(GrepperOperator)

